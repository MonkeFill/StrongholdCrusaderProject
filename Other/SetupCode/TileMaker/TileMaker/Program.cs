using System;
using System.Diagnostics;
using System.IO;
using System.Linq;

//All code generated by ChatGPT

class ImageBatchExporter
{
    static void Main()
    {
        // Folder containing all source images
        string imagesDir = @"/Users/filippos/Desktop/Dev/StrongholdCrusaderProject/Other/Assets/Revamped Assets/Tiles/Stone";

        // Path to your AI template
        string aiTemplate = @"/Users/filippos/Desktop/Dev/StrongholdCrusaderProject/Other/Assets/Revamped Assets/Tiles/Tile Template.ai";

        // Output folder for exported images
        string outputDir = @"/Users/filippos/Desktop/Dev/StrongholdCrusaderProject/Other/Assets/Revamped Assets/Tiles/Stone";

        // Path to write the temporary generated JSX script
        string jsxPath = "generated.jsx";

        // Get all PNG files in the folder and sort alphabetically
        var images = Directory.GetFiles(imagesDir, "*.png").OrderBy(f => f).ToList();

        // Ensure the total is a multiple of 4 (or handle remainder as needed)
        int totalBatches = images.Count / 4;

        for (int batch = 0; batch < totalBatches; batch++)
        {
            // Get 4 images for this batch
            var currentImages = images.Skip(batch * 4).Take(4).ToList();

            // Escape file paths for JavaScript
            string[] escapedPaths = currentImages.Select(p => $"\"{p.Replace("\\", "/")}\"").ToArray();

            // Create a comma-separated JS array
            string jsArray = string.Join(", ", escapedPaths);

            // Read base template
            string template = File.ReadAllText("template.jsx");

            // Build export filename like Water1.png, Water2.png, etc.
            string exportFilename = $"Stone{batch + 1}.png";
            string exportPath = Path.Combine(outputDir, exportFilename).Replace("\\", "/");

            // Replace placeholders
            string finalJsx = template
                .Replace("[IMAGE_PATHS]", jsArray)
                .Replace("[AI_PATH]", aiTemplate.Replace("\\", "/"))
                .Replace("[EXPORT_PATH]", exportPath);

            // Write to file
            File.WriteAllText(jsxPath, finalJsx);

            Console.WriteLine($"Batch {batch + 1}: Exporting {exportFilename} from:");
            currentImages.ForEach(img => Console.WriteLine(" - " + Path.GetFileName(img)));

            RunIllustratorScript(jsxPath);
        }
    }

    static void RunIllustratorScript(string jsxPath)
    {
        string fullPath = Path.GetFullPath(jsxPath).Replace("\\", "/");

        // Tell Illustrator to activate first
        string cmd = $"-e \"tell application \\\"Adobe Illustrator\\\" to activate\" " +
                     $"-e \"tell application \\\"Adobe Illustrator\\\" to do javascript file \\\"{fullPath}\\\"\"";

        var process = new Process();
        process.StartInfo.FileName = "osascript";
        process.StartInfo.Arguments = cmd;
        process.StartInfo.RedirectStandardOutput = true;
        process.StartInfo.RedirectStandardError = true;
        process.StartInfo.UseShellExecute = false;
        process.StartInfo.CreateNoWindow = true;

        process.Start();

        string output = process.StandardOutput.ReadToEnd();
        string error = process.StandardError.ReadToEnd();
        process.WaitForExit();

        Console.WriteLine("osascript output:\n" + output);
        if (!string.IsNullOrWhiteSpace(error))
            Console.WriteLine("osascript error:\n" + error);
    }

}
